#!/usr/bin/env bash
set -euo pipefail

# IsaacLab installer
# - Optionally installs this repo as a Python package if pyproject.toml is installable
# - Installs a persistent 'lab' command under ~/.local/bin to run docker/runner.py

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)"
REPO_DIR="${SCRIPT_DIR}"

echo "[IsaacLab] Running installer from ${REPO_DIR}"

# Args
FORCE_REINSTALL=false
print_usage() {
  cat <<USAGE
Usage: $(basename "$0") [options]

Options:
  -f, --force    Force reinstall the 'lab' command wrapper
  -h, --help     Show this help and exit
USAGE
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    -f|--force)
      FORCE_REINSTALL=true
      shift
      ;;
    -h|--help)
      print_usage
      exit 0
      ;;
    *)
      echo "[ERROR] Unknown option: $1" >&2
      print_usage
      exit 2
      ;;
  esac
done

# Choose Python
PY="${PYTHON:-python3}"
if ! command -v "$PY" >/dev/null 2>&1; then
  if command -v /bin/python3 >/dev/null 2>&1; then
    PY="/bin/python3"
  else
    echo "[ERROR] python3 not found. Please install Python 3 and re-run." >&2
    exit 1
  fi
fi

install_pyproject() {
  local pfile="${REPO_DIR}/pyproject.toml"
  if [[ ! -f "$pfile" ]]; then
    echo "[INFO] No pyproject.toml found. Skipping Python package install."
    return 0
  fi
  # Determine if the pyproject declares a build system (required to install via pip)
  if grep -qE '^\[build-system\]' "$pfile" || grep -qE '^\[tool.poetry\]' "$pfile"; then
    echo "[INFO] Detected installable pyproject.toml. Installing package (editable)â€¦"
    "$PY" -m pip install --user -e "$REPO_DIR"
  else
    echo "[INFO] pyproject.toml present but no build-system section found. Skipping package install."
  fi
}

install_lab_command() {
  local target_dir="${HOME}/.local/bin"
  local wrapper_path="${target_dir}/lab"
  mkdir -p "$target_dir"

  # Skip reinstall unless forced and wrapper already exists
  if [[ -f "$wrapper_path" && "${FORCE_REINSTALL}" != true ]]; then
    echo "[INFO] 'lab' command already exists at ${wrapper_path}. Use --force to reinstall."
  else
    if [[ -f "$wrapper_path" ]]; then
      cp -f "$wrapper_path" "${wrapper_path}.bak" || true
    fi

    cat > "$wrapper_path" <<EOF
#!/usr/bin/env bash
set -euo pipefail
# Auto-generated by IsaacLab install.sh
REPO_DIR="${REPO_DIR}"

PY="\${PYTHON:-python3}"
if ! command -v "\${PY}" >/dev/null 2>&1; then
  PY="/bin/python3"
fi

cd "${REPO_DIR}"
exec "\${PY}" docker/runner.py "\$@"
EOF
    chmod +x "$wrapper_path"
    echo "[OK] Installed/updated 'lab' at ${wrapper_path}"
  fi

  # Ensure ~/.local/bin on PATH for future shells
  local bashrc="${HOME}/.bashrc"
  local add_path_line='export PATH="$HOME/.local/bin:$PATH"'
  if ! grep -qs "^${add_path_line//\//\/}$" "$bashrc" 2>/dev/null; then
    {
      echo ""
      echo "# Added by IsaacLab installer (lab command)"
      echo "$add_path_line"
    } >> "$bashrc"
    echo "[INFO] Added ~/.local/bin to PATH in ${bashrc}"
  fi
}

# Step 1: install Python package (optional)
install_pyproject

# Step 2: install the 'lab' command
install_lab_command

echo "[Done] Install complete."
if ! command -v lab >/dev/null 2>&1; then
  echo "[INFO] To start using 'lab' now, run: source \"${HOME}/.bashrc\""
fi
echo "[INFO] Try: lab (interactive)"
